import React from 'react';
import { createOnChangeWithTransform } from './helpers';
import getDisplayName from 'react-display-name';

/**
 * Higher order component that wraps a given input to be compatible with redux-inputs
 *
 * The wrapped component will be given the following props:
 * - id - An identifier
 * - value - The component's last known valid value
 * - onChange - A function to be called when changes occur
 *
 * When used with getInputProps, the following may be passed down
 * - error - When present, the input is in an error state.
 *           This value should be shown instead of the 'value' prop.
 * - errorText - Text to display when the field is in error. Can be set dynamically
 *               during validation on the top-level component.
 */
const ReduxInputsWrapper = (WrappedComponent, options = {}) => {
    const Wrapper = (props) => {
        const {
            id,
            _id,
            value,
            parser,
            formatter,
            resolve,
            reject,
            dispatchChange,
            ...otherProps
        } = props;

        const {
            /**
             * transform fn to run on onChange event before passing to redux
             */
            onChangeTransform
        } = options;

        const onChangeWithTransform = createOnChangeWithTransform(
            _id, dispatchChange, onChangeTransform, parser, resolve, reject
        );

        return (
            <WrappedComponent id={id || _id}
                              value={formatter ? formatter(value) : value}
                              onChange={onChangeWithTransform}
                              {...otherProps}/>
        );
    };
    Wrapper.displayName = `ReduxInputsWrapper(${getDisplayName(WrappedComponent)})`;
    return Wrapper;
};
ReduxInputsWrapper.propTypes = {
    /**
     * Optional override id if you don't want to use default _id from inputConfig key
     */
    id: React.PropTypes.string,
    /**
     * Autogenerated id from getInputProps
     */
    _id: React.PropTypes.string.isRequired,
    /**
     * The logical value of the input from the redux store
     */
    value: React.PropTypes.any,
    /**
     * Function to create a value from a 'change' event into a value
     */
    parser: React.PropTypes.func,
    /**
     * Function to create a DOM-appropriate string from a value
     */
    formatter: React.PropTypes.func,
    /**
     * Function that will be called after value changes have been set in the store
     */
    resolve: React.PropTypes.func,
    /**
     * Function that will be called if value changes fail validation
     */
    reject: React.PropTypes.func,
    /**
     * Private id - from getInputProps, returns a promise
     */
    dispatchChange: React.PropTypes.func.isRequired
};

export default ReduxInputsWrapper;
